version: '3.8'

services:
  db:
    image: postgres:13
    container_name: suburbcompass_db
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/api-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  api-service:
    build:
      context: ./backend/api-service
      dockerfile: Dockerfile
    container_name: suburbcompass_api
    restart: always
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      - db
    volumes:
      - ./backend/api-service:/app
    networks:
      - app-network

  ai-service:
    build:
      context: ./backend/ai-service
      dockerfile: Dockerfile
    container_name: suburbcompass_ai_service
    restart: always
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
    volumes:
      - ./backend/ai-service:/app
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suburbcompass_frontend
    restart: always
    ports:
      - "3000:3000"
    command: sh -c "rm -rf .next && ./node_modules/.bin/next dev"
    depends_on:
      - api-service
      - ai-service
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 